#!/bin/bash

yum update -y

yum install httpd -y

yum install git -y

git clone https://github.com/AbhilashSivaraman/Basic.git /tmp/mywebsite

cp -R /tmp/mywebsite/* /var/www/html/

systemctl enable httpd

systemctl start httpd








Docker
1. What is Docker?
	Docker is a platform that enables developers to develop, ship, and run applications in containers. Containers are lightweight, standalone, and executable packages that include everything needed to run an application: code, runtime, system tools, system libraries, and settings.


2. How Does Docker Work?

   At its core, Docker uses containerization technology, containers. Here's how it works: allows applications to run in isolated environments called containers
	Containerization: Docker uses the concept of containerization to package applications and their dependencies into standardized units called containers. Each container shares the same underlying operating system kernel but is isolated
from other containers. 
	Docker Engine: The Docker Engine is the runtime environment that runs and manages Docker containers. It consists of a daemon process (docked) and a command-line interface (CLI) tool (docker)..
	Docker file: A Docker file is a text file that contains instructions to build a Docker image. It specifies the base image, environment variables, dependencies, and commands needed to run the application.
	Docker Image: A Docker image is a lightweight, standalone, executable package that contains the application code, runtime, libraries, dependencies, and other files needed to run the application. Images are created from Dockerfiles using the docker build command.
	Docker Container: A Docker container is a running instance of a Docker image. Containers are isolated environments that run applications without affecting the host system. They can be started, stopped, and deleted using Docker commands. 3. Key Concepts in Docker:
	Images: Docker images are read-only templates used to create Docker containers. They can be pulled from Docker Hub (a public registry) or created locally using Dockerfiles.
	Containers: Docker containers are lightweight, portables and self-coefficient runtime environments that run applications. They can be started, stopped, and managed using Docker commands.
	Dockerfile: Dockerfile is a text file that contains instructions for building a Docker image. It specifies the base image, dependencies, environment variables, and commands to run when the container starts.
	Docker Hub: Docker Hub is a cloud-based repository for storing and sharing Docker images. It hosts a vast collection of public images that developers can use as base images for their applications.
	Docker Registry: Docker Registry is a service for storing and distributing Docker Images. It can be a public registry like
Docker Hub or a private registry hosted on-premises or in the cloud.



4. Benefits of Docker:

	Portability: Docker containers can run on any platform that supports Docker, making them highly portable across different environments.
	Isolation: Containers provide isolation between applications and their dependencies, ensuring that changes to one container do not affect others.
	Efficiency: Docker containers are lightweight and share the host system's resources, resulting in efficient resource utilization and faster deployment times.
	Consistency: Docker ensures consistency between development, testing, and production environments, reducing the likelihood
	Scalability

5. Use Cases for Docker:

	Microservices Architecture: Docker is well-suited for building and deploying microservices-based applications, where each. service runs in its own container.
	Continuous Integration/Continuous Deployment (CI/CD): Docker streamlines the CI/CD pipeline by providing consistent
environments for building, testing, and deploying applications.
	DevOps Practices: Docker promotes DevOps practices by enabling collaboration between development and operations teams
through standardized environments and automation.
	Legacy Application Modernization: Docker allows organizations to containerize legacy applications, making them more portable, scalable, and easier to manage.


---------------------------------------------------------------------------------
This command for the docker application



docker --version

docker images

docker pull nginx

run -d --name <name> -p 8080:80 nginx

new tab: 8080:80
----------------------------------------------------------------------------------


This commands for the aws docker connect


docker stop <name>  === to stop the container

systemctl stop httpd  === to stop the apache server



1.  sudo su          ===== means establishing root user


2. yum install docker  === to install the docker to the terminal


3. docker --version

4. systemctl start docker

5. systemctl stop docker

systemctl start docker

6. docker images   == may be use

7. docker pull nginx

8 . docker run -d --name <name> -p 80:80 nginx

